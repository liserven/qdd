<?php/** * Created by 赵晓凡 * User: zhaoxiaofan * Date: 2017/2/17 * Time: 9:30 */namespace api\index\controller;use think\Db;use think\Session;/** * Class Cart * @package home\index\controller * @return 首页页面 */class Cart extends Auth{    /**     * 购物车列表     * 请求实例：http://www.XX.com/api.php/cart/list     * 请求方式 get     * @return returnData['data'] data 已添加商品信息数据     * @return returnData['status'] status 0:添加失败  1:添加成功     * @return returnData['msg'] msg  信息提示     */    public function goodsList(){        if($this->loginStatus) {//判断会员是否登录            $condition['Agentd']=$this->username;            $goodslist=Db::name('shoppingcart')->where($condition)->field('supid')->group('SupId')->select();            $cartList=[];            if($goodslist){                $sum_money = 0;                $sum_integral = 0;                $sum_giveintegral = 0;                foreach ($goodslist as $k=>$v){                    $cond['ID'] = $v['supid'];                    $supdata = Db::name('supplier')->where($cond)->field('name')->find();                    $cartList[$k]['supid']=$v['supid'];                    $cartList[$k]['supname']=$supdata['name'];                    $where1['Agentd']=$this->username;                    $where1['SupId']=$v['supid'];                    $subList=$cartList[$k]['sub']=indexToLower(Db::name('shoppingcart')->where($where1)->field('proid,shopprice,consumeintegral,giveintegral,id,status,proname,stylename,pronum')->select());                    foreach ($subList as $key=>$val){                        $where['ProId']=$val['proid'];                        $prodata=Db::name('product')->where($where)->field('proimg,qiqiuproimgpath')->find();//                        if(is_onqiniu()==true){//                            $cartList[$k]['sub'][$key]['img']=$prodata['qiqiuproimgpath'];//                        }else{                            if(strpos($prodata['proimg'],'http://')!==false){                                $cartList[$k]['sub'][$key]['img']=$prodata['proimg'];                                $cartList[$k]['sub'][$key]['proimg']=$prodata['proimg'];                            }else{                                $cartList[$k]['sub'][$key]['img']=config('IMAGE_DOMAIN_NAME').'/public/Upload/cpimg/'.$prodata['proimg'];                                $cartList[$k]['sub'][$key]['proimg']=config('IMAGE_DOMAIN_NAME').'/public/Upload/cpimg/'.$prodata['proimg'];                            }//                            $cartList[$k]['sub'][$key]['img']=config('IMAGE_DOMAIN_NAME').'/public/Upload/cpimg/'.$prodata['proimg'];//                            $cartList[$k]['sub'][$key]['img']=$prodata['proimg'];//                        }//                        $cartList[$k]['sub'][$key]['proimg']=$prodata['proimg'];//                        $cartList[$k]['sub'][$key]['proimg']=config('IMAGE_DOMAIN_NAME').'/public/Upload/cpimg/'.$prodata['proimg'];                        if($val['status']==1){                            $sum_money += $val['shopprice'];                            $sum_integral += $val['consumeintegral'];                            $sum_giveintegral +=$val['giveintegral'];                        }                        $cartList[$k]['sub'][$key]['shopprice']=$val['shopprice']/$val['pronum'];                        $cartList[$k]['sub'][$key]['consumeintegral']=intval($val['consumeintegral']/$val['pronum']);                        $cartList[$k]['sub'][$key]['giveintegral']=intval($val['giveintegral']/$val['pronum']);                    }                }                $whereuser['UserId']=$this->username;                $usertype=Db::name('usermsg')->field('userType')->where($whereuser)->find();                $returnData['data']["usertype"] =$usertype['userType'];                $returnData['data']["data_list"] =$cartList;                $returnData["data"]['sum_money'] =$sum_money;                $returnData["data"]['sum_integral'] =$sum_integral;                $returnData["data"]['sum_giveintegral'] =$sum_giveintegral;                $returnData["data"]['goods_num'] =count($goodslist);                $returnData['status'] = 1;                $returnData['msg'] = '获取数据成功';            }else{                $returnData['status'] = 0;                $returnData['msg'] = '购物车为空';            }        }else{            $returnData['status'] = 0;            $returnData['msg'] = '未登录';        }        return json($returnData);    }    /**     * 添加商品到购物车     * 请求实例：http://www.XX.com/api.php/cart/add?proid=7671&styleid=9100&pronum=6     * 请求方式 get     * @param proid 产品id     * @param styleid  规格id     * @param pronum  商品数量     * @return returnData['data'] data 已添加商品信息数据     * @return returnData['status'] status 0:添加失败  1:添加成功     * @return returnData['msg'] msg  信息提示     */	public function addGoods(){	    if($this->loginStatus) {//判断会员是否登录            $proid = $this->request->param('proid');            $styleid = $this->request->param('styleid');            $pronum = $this->request->param('pronum');            $agentd=$this->username;            $where['ProId'] = $proid;            $where['IsOnSell'] = 1;            $procount = Db::name('product')->field('IsHit')->where($where)->find();//判断该商品是否存在或者已上架            if ($procount) {                $whereuser['UserId']=$agentd;                $usertype=Db::view('usermsg','userType')                    ->view('usertype','discount','usertype.ID=usermsg.userType')                    ->where($whereuser)->find();                if(($procount['IsHit']==2)&&($usertype['userType']<=1)){                    $returnData['status'] = 0;                    $returnData['msg'] = '级别不足，请升级会员级别';                    return json($returnData);                }                $condition['ProId'] = $proid;                $condition['StyleId'] = $styleid;                $condition['Agentd'] = $agentd;                $cartcheck = Db::name('shoppingcart')->where($condition)->count();//判断购物车中是否已添加相同规格的商品                if ($cartcheck == 0) {                    $styledata=Db::name('productstock')->where('StyleId='.$styleid)->field('StyleName,StyleName1,Txm,Kucun')->find();                    if($pronum<=$styledata['Kucun']) {                        $fields = 'ProName,SupplierId,VipPrice,EnjoyPrice,MarketPrice,ConsumeIntegral,Unit,BalancePrice,MinPurchase,GiveIntegral,is_pode,Pv,IsHit,Weight';                        $prodata = Db::name('product')->where('ProId=' . $proid)->field($fields)->find();                        if($pronum>=$prodata['MinPurchase']&&(($pronum%$prodata['MinPurchase'])==0)) {//判断所购的商品数量是否小于最小起订量且为最小起订量的倍数                            //构建添加购物车的数据--start--                            $data["SupId"] = $prodata['SupplierId'];                            $supInfo=Db::name('supplier')->where('ID='.$prodata['SupplierId'])->field('Name')->find();                            $data["SupName"] = $supInfo['Name'];                            $data["ProId"] = $proid;                            $data["Pv"] = $prodata['Pv']*$pronum;                            $data["ProName"] = $prodata['ProName'];                            $data["is_pode"] = $prodata['is_pode'];                            $data["IsHit"] = $prodata['IsHit'];                            $data["StyleId"] = $styleid;                            $data["StyleName"] = $styledata['StyleName'].$styledata['StyleName1'];                            $data["Txm"] = $styledata['Txm'];                            $data["ProNum"] = $pronum;                            if($usertype['userType']==1){                                $data["ShopPrice"] = $prodata['VipPrice'] * $pronum*$usertype['discount'];                            }elseif($usertype['userType']>=2){                                $data["ShopPrice"] = $prodata['EnjoyPrice'] * $pronum*$usertype['discount'];                            }else{                                $data["ShopPrice"] = $prodata['MarketPrice'] * $pronum*$usertype['discount'];                            }                            $data["ConsumeIntegral"] = $prodata['ConsumeIntegral'] * $pronum;                            $data["GiveIntegral"] = $prodata['GiveIntegral'] * $pronum;                            $data["Weight"] = $prodata['Weight'] * $pronum;                            $data["Unit"] = $prodata['Unit'];                            $data["CartType"] = 2;                            $data["Agentd"] = $agentd;                            $data["BalancePrice"] = $prodata['BalancePrice'];                            $data["AddTime"] = date('Y-m-d H:i:s', time());                            $data["RegionOfBuy"] = 'PC端';                            //构建添加购物车的数据--end--                            Db::name('shoppingcart')->insert($data);//添加数据到购物车                            $cartno = Db::name('shoppingcart')->where("agentd='" . $agentd . "'")->count();//获取该会员购物车中的商品数量                            Session::set('cartno', $cartno);                            $cartdata['cartno'] = $cartno;                            $returnData['data'] = $cartdata;                            $returnData['status'] = 1;                            $returnData['msg'] = '添加成功';                        }else{                            $returnData['status'] = 0;                            $returnData['msg'] = '商品数量必须大于等于最小起订量且为最小起订量的倍数';                        }                    }else{                        $returnData['status'] = 0;                        $returnData['msg'] = '该商品库存不足';                    }                } else {                    $returnData['status'] = 0;                    $returnData['msg'] = '该商品已添加购物车';                }            } else {                $returnData['status'] = 0;                $returnData['msg'] = '产品不存在或者已下架';            }        }else{            $returnData['status'] = 0;            $returnData['msg'] = '未登录';        }		return json($returnData);	}    /**     * 根据购物车id删除购物车中的商品     * 请求实例：http://www.XX.com/api.php/cart/delete?cartid=11211     * 请求方式 get     * @param cartid 购物车id     * @return $returnData['status']  status 删除状态     * @return $returnData['msg']  msg 删除提示     */		public function delGoods(){        if($this->loginStatus) {//判断会员是否登录            $agentd=$this->username;            $cartid = $this->request->param('cartid');            Db::name('shoppingcart')->where('Id=' . $cartid." and Agentd='".$agentd."'")->delete();            $returnData['data'] = array();            $returnData['status'] = 1;            $returnData['msg'] = '已删除';        }else{            $returnData['data'] = array();            $returnData['status'] = 0;            $returnData['msg'] = '未登录';        }        return json($returnData);	}    /**     *购物车中商品数量的更改     * 请求实例：http://www.XX.com/api.php/cart/update?act=increase&cartid=198702  数量增加     * 请求方式 get     * 请求实例：http://www.XX.com/api.php/cart/update?act=reduce&cartid=198702   数量的减少     * 请求方式 get     * @param act   increase 数量增加  |   reduce  数量的减少     * @param cartid     * @return returnData['data']     *     *     data[     *       pronum：更新数量后该商品的数量     *       shopprice：更新数量后该商品的应付款(商品单价与数量的乘积)     *       pv：更新数量后该商品的扣除积分(单个商品应扣积分与数量的乘积)     *       shopcartsum：会员购物车中商品价格总额     *       shoppvsum：会员购买的商品需扣除积分的总额     *     ]     * @return returnData['status'] status 0:添加失败  1:添加成功     * @return returnData['msg'] msg  信息提示     */		public function updateGoodsNum(){        if($this->loginStatus) {//判断会员是否登录            $act = $this->request->param('act');            $cartid = $this->request->param('cartid');            $membername=$this->username;            $whereuser['UserId']=$membername;            $usertype=Db::view('usermsg','userType')                ->view('usertype','discount','usertype.ID=usermsg.userType')                ->where($whereuser)->find();            if ($act == 'increase') {//按照最低起订量增加                $cartRecord=Db::name('shoppingcart')->where('Id=' . $cartid." and Agentd='".$membername."'")->field('ProId,ProNum,ShopPrice,ConsumeIntegral,StyleId,GiveIntegral,Pv,Weight')->find();                if($cartRecord){                    $kucunData=Db::name('productstock')->where('StyleId='.$cartRecord['StyleId'])->field('Kucun')->find();                    $proinfo=Db::name('product')->where('ProId='.$cartRecord['ProId'])->field('ProName,MinPurchase,VipPrice,EnjoyPrice,MarketPrice,ConsumeIntegral,GiveIntegral,Pv,Weight')->find();                    $updateData['ProNum']=$cartRecord['ProNum']+$proinfo['MinPurchase'];                    $updateData['Weight'] = $cartRecord['Weight'] + $proinfo['MinPurchase'] * $proinfo['Weight'];                    if($kucunData['Kucun']>=$updateData['ProNum']) {//判断购物数量是否大于库存                        if($usertype['userType']==1){                            $updateData['ShopPrice'] = (int)$cartRecord['ShopPrice'] + $proinfo['MinPurchase'] * $proinfo['VipPrice']*$usertype['discount'];                        }elseif ($usertype['userType']>=2){                            $updateData['ShopPrice'] = (int)$cartRecord['ShopPrice'] + $proinfo['MinPurchase'] * $proinfo['EnjoyPrice']*$usertype['discount'];                        }else{                            $updateData['ShopPrice'] = (int)$cartRecord['ShopPrice'] + $proinfo['MinPurchase'] * $proinfo['MarketPrice']*$usertype['discount'];                        }                        $updateData['Pv'] = $cartRecord['Pv'] + $proinfo['MinPurchase'] * $proinfo['Pv'];                        $updateData["ConsumeIntegral"] = $cartRecord['ConsumeIntegral'] + $proinfo['MinPurchase'] * $proinfo['ConsumeIntegral'];                        $updateData["GiveIntegral"] = $cartRecord['GiveIntegral'] + $proinfo['MinPurchase'] * $proinfo['GiveIntegral'];                        Db::name('shoppingcart')->where('Id=' . $cartid . " and Agentd='" . $membername . "'")->update($updateData);                        $cartNewRecord['pronum'] = $updateData['ProNum'];                        $cartNewRecord['shopprice'] = $updateData['ShopPrice'];                        $cartNewRecord['consumeintegral'] = $updateData["ConsumeIntegral"];                        $cartNewRecord['giveintegral'] = $updateData["GiveIntegral"];                        $cartNewRecord['shopcartsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('shopprice');                        $cartNewRecord['shoppvsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('ConsumeIntegral');                        $cartNewRecord['shopgivepvsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('GiveIntegral');                        $returnData['data'] = $cartNewRecord;                        $returnData['status'] = 1;                        $returnData['msg'] = '数量增加成功';                    }else{                        $returnData['status'] = 0;                        $returnData['msg'] = '该商品库存不足';                    }                }else{                    $returnData['status'] = 0;                    $returnData['msg'] = '购物车中无此商品';                }            } elseif ($act == 'reduce') {//按照最低起订量减少                $cartRecord=Db::name('shoppingcart')->where('Id=' . $cartid." and Agentd='".$membername."'")->field('ProId,ProNum,ShopPrice,ConsumeIntegral,GiveIntegral,Pv,Weight')->find();                if($cartRecord) {                    $proinfo = Db::name('product')->where('ProId=' . $cartRecord['ProId'])->field('ProName,MinPurchase,VipPrice,EnjoyPrice,MarketPrice,ConsumeIntegral,GiveIntegral,Pv,Weight')->find();                    if ($cartRecord['ProNum'] <= $proinfo['MinPurchase']) {//如果购物车中的商品数量小于或者等于该商品的最小起订量，则无法更改                        $returnData['status'] = 0;                        $returnData['msg'] = '商品 : ' . $proinfo['ProName'] . '最小起订数量必须为' . $proinfo['MinPurchase'];                    } else {                        $updateData['ProNum'] = $cartRecord['ProNum'] - $proinfo['MinPurchase'];                        if($usertype['userType']==1){                            $updateData['ShopPrice'] = (int)$cartRecord['ShopPrice'] - $proinfo['MinPurchase'] * $proinfo['VipPrice']*$usertype['discount'];                        }elseif ($usertype['userType']>=2){                            $updateData['ShopPrice'] = (int)$cartRecord['ShopPrice'] - $proinfo['MinPurchase'] * $proinfo['EnjoyPrice']*$usertype['discount'];                        }else{                            $updateData['ShopPrice'] =(int) $cartRecord['ShopPrice'] - $proinfo['MinPurchase'] * $proinfo['MarketPrice']*$usertype['discount'];                        }                        $updateData["ConsumeIntegral"] = $cartRecord['ConsumeIntegral'] - $proinfo['MinPurchase'] * $proinfo['ConsumeIntegral'];                        $updateData["GiveIntegral"] = $cartRecord['GiveIntegral'] - $proinfo['MinPurchase'] * $proinfo['GiveIntegral'];                        $updateData["Weight"] = $cartRecord['Weight'] - $proinfo['MinPurchase'] * $proinfo['Weight'];                        $updateData["Pv"] = $cartRecord['Pv'] - $proinfo['MinPurchase'] * $proinfo['Pv'];                        Db::name('shoppingcart')->where('Id=' . $cartid . " and Agentd='" . $membername . "'")->update($updateData);                        $cartNewRecord['pronum'] = $updateData['ProNum'];                        $cartNewRecord['shopprice'] = $updateData['ShopPrice'];                        $cartNewRecord['consumeintegral']=$updateData["ConsumeIntegral"];                        $cartNewRecord['giveintegral'] = $updateData["GiveIntegral"];                        $cartNewRecord['shopcartsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('shopprice');                        $cartNewRecord['shoppvsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('ConsumeIntegral');                        $cartNewRecord['shopgivepvsum'] = Db::name('shoppingcart')->where("status=1 and agentd='" . $membername . "'")->sum('GiveIntegral');                        $returnData['data'] = $cartNewRecord;                        $returnData['status'] = 1;                        $returnData['msg'] = '数量减少成功';                    }                }else{                    $returnData['status'] = 0;                    $returnData['msg'] = '购物车中无此商品';                }            } else {                $returnData['status'] = 0;                $returnData['msg'] = '非法操作';            }        }else{            $returnData['status'] = 0;            $returnData['msg'] = '未登录';        }        return json($returnData);	}    public function newupdateGoodsNum(){        $act = $this->request->param('act');        $proid = $this->request->param('proid');        $num = $this->request->param('num');        if ($act == 'increase') {//按照最低起订量增加            $where8['ProId']=$proid;//                var_dump(11);exit;            $kucunData=Db::name('productstock')->where($where8)->field('Kucun')->find();//                    $where9['ProId']=$proid;//                    $proinfo=Db::name('product')->where($where9)->field('ProName,MinPurchase,VipPrice,ConsumeIntegral,GiveIntegral,MarketPrice')->find();            if($kucunData['Kucun']>=$num) {//判断购物数量是否大于库存                $returnData['data'] = $num;                $returnData['status'] = 1;                $returnData['msg'] = '数量增加成功';            }else{                $returnData['status'] = 0;                $returnData['msg'] = '该商品库存不足';            }        } elseif ($act == 'reduce') {//按照最低起订量减少            $where13['ProId']=$proid;            $proinfo = Db::name('product')->where($where13)->field('ProName,MinPurchase,VipPrice,ConsumeIntegral,GiveIntegral,MarketPrice')->find();            if ($num < $proinfo['MinPurchase']) {//如果购物车中的商品数量小于或者等于该商品的最小起订量，则无法更改                $returnData['status'] = 0;                $returnData['msg'] = '商品 : ' . $proinfo['ProName'] . '最小起订数量必须为' . $proinfo['MinPurchase'];            } else {                $returnData['data'] = $num;                $returnData['status'] = 1;                $returnData['msg'] = '数量减少成功';            }        } else {            $returnData['status'] = 0;            $returnData['msg'] = '非法操作';        }        return json($returnData);    }    /**     * 清空已登录会员购物车中的所有商品     * 请求实例：http://www.XX.com/api.php/cart/empty     * @return $returnData['status']  status 删除状态     * @return $returnData['msg']  msg 删除提示     */		public function emptyCart(){        if($this->loginStatus) {//判断会员是否登录            $agentd=$this->username;            Db::name('shoppingcart')->where("Agentd='".$agentd."'")->delete();            $returnData['status'] = 1;            $returnData['msg'] = '已删除';        }else{            $returnData['status'] = 0;            $returnData['msg'] = '未登录';        }        return json($returnData);	}	public function shopStatus(){//	    $ishit=session('ishit');        $condtion['Agentd'] = $this->username;        $condtion['status'] = 1;//        $condtion['IsHit'] = $ishit;	    $id=$this->request->param('id');        $status=$this->request->param('status');        $action=$this->request->param('action');        if(empty($action)){            $back=Db::name('shoppingcart')->where('id='.$id)->update(['status'=>$status]);            $backdata = Db::name('shoppingcart')->where($condtion)->sum('ShopPrice');            $backConsumeIntegral = Db::name('shoppingcart')->where($condtion)->sum('ConsumeIntegral');            $backGiveIntegral = Db::name('shoppingcart')->where($condtion)->sum('GiveIntegral');            if($back){                $returnData['status'] = 1;                $returnData['msg'] = '成功';                $returnData['sum_money'] = empty($backdata)?0:$backdata;                $returnData['sum_integral'] = empty($backConsumeIntegral)?0:$backConsumeIntegral;                $returnData['sum_giveintegral'] = empty($backGiveIntegral)?0:$backGiveIntegral;            }else{                $returnData['status'] = 0;                $returnData['msg'] = '失败';                $returnData['sum_money'] = empty($backdata)?0:$backdata;                $returnData['sum_integral'] = empty($backConsumeIntegral)?0:$backConsumeIntegral;                $returnData['sum_giveintegral'] = empty($backGiveIntegral)?0:$backGiveIntegral;            }        }elseif($action=='all'){            $where['Agentd']=$this->username;//            $where['IsHit']=$ishit;            $data=Db::name('shoppingcart')->where($where)->field('id')->select();            foreach ($data as $val){                Db::name('shoppingcart')->where('id='.$val['id'])->update(['status'=>1]);            }            $backdata = Db::name('shoppingcart')->where($condtion)->sum('ShopPrice');            $backConsumeIntegral = Db::name('shoppingcart')->where($condtion)->sum('ConsumeIntegral');            $backGiveIntegral = Db::name('shoppingcart')->where($condtion)->sum('GiveIntegral');            $returnData['status'] = 1;            $returnData['msg'] = '成功';            $returnData['sum_money'] = empty($backdata)?0:$backdata;            $returnData['sum_integral'] = empty($backConsumeIntegral)?0:$backConsumeIntegral;            $returnData['sum_giveintegral'] = empty($backGiveIntegral)?0:$backGiveIntegral;        }elseif($action=='nothing') {            $where['Agentd'] = $this->username;//            $where['IsHit'] = $ishit;            $data = Db::name('shoppingcart')->where($where)->field('id')->select();            foreach ($data as $val) {                Db::name('shoppingcart')->where('id=' . $val['id'])->update(['status' => 0]);            }            $backdata = Db::name('shoppingcart')->where($condtion)->sum('ShopPrice');            $backConsumeIntegral = Db::name('shoppingcart')->where($condtion)->sum('ConsumeIntegral');            $backGiveIntegral = Db::name('shoppingcart')->where($condtion)->sum('GiveIntegral');            $returnData['status'] = 1;            $returnData['msg'] = '成功';            $returnData['sum_money'] = empty($backdata)?0:$backdata;            $returnData['sum_integral'] = empty($backConsumeIntegral)?0:$backConsumeIntegral;            $returnData['sum_giveintegral'] = empty($backGiveIntegral)?0:$backGiveIntegral;        }elseif($action=='check'){            $where['Agentd'] = $this->username;            $where['status'] = 1;//            $where['IsHit'] = $ishit;            $data = Db::name('shoppingcart')->where($where)->field('id')->select();            if(empty($data)){                $returnData['data'] = "";                $returnData['status'] = 0;                $returnData['msg'] = '请选择待结算的商品';            }else{                $returnData['data'] = "";                $returnData['status'] = 1;                $returnData['msg'] = '已选择';            }        }        return json($returnData);    }}