<?php/** * Created by 赵晓凡 * User: zhaoxiaofan * Date: 2017/5/3 * Time: 10:45 */namespace api\index\controller;use think\Db;use think\session;class AccountRecordAction implements ActionInterface{    /**账户操作     * @param $umoney     * @param $goodspv     * @param $userid     * @param $orderno     * @return mixed     */    public function accountAction($param=null)    {        $userData=array_change_key_case(Db::name('usermsg')->where("userid='".$param['userid']."'")->find());        $userData['umoney']=empty($userData['umoney'])?0:$userData['umoney'];        $userData['pv']=empty($userData['pv'])?0:$userData['pv'];        $reudata=[];        $now_time=date('Y-m-d H:i:s',time());        if(!empty($param['account_umoney'])){            $umoneyData=$param['account_umoney'];            if(!empty($umoneyData['umoney'])){                $yuumoney=$reudata["Umoney"]=$userData["umoney"]+$umoneyData['umoney'];                if($yuumoney>=0){                    //在购物币消费记录表里添加记录                    $datauf["UserId"]=$param['userid'];                    $datauf["FlowType"]=$umoneyData['flowtype'];                    $datauf["Amount"]=$umoneyData['umoney'];                    $datauf["Balance"]=$yuumoney; //剩余购物币                    $datauf["FromWho"]=$param['formwho'];                    $datauf["Memo"]=$umoneyData['memo'];                    $datauf["AddDate"]=$now_time;                    Db::name('accountrecord')->insert($datauf);                }else{                    $returnData['status']=0;                    $returnData['msg']=$yuumoney;                    return $returnData;                }            }        }        if(!empty($param['account_goodspv'])){            $goodspvData=$param['account_goodspv'];            if($goodspvData['typename']!='返积分')            {                $yugoodspv=$reudata["Pv"]=$userData["pv"]+$goodspvData['goodspv'];            }            if($goodspvData['typename']=='返积分')            {                $yugoodspv=0;            }            if(!empty($goodspvData['goodspv'])){                if($yugoodspv>=0){                    //在消费积分消费记录表里添加记录                    $datapf["UserId"]=$param['userid'];                    $datapf["TypeName"]=$goodspvData['typename'];                    $datapf["Amount"]=$goodspvData['goodspv'];                    $datapf["BalancePv"]=$yugoodspv; //剩余消费积分                    $datapf["FromWho"]=$param['formwho'];                    $datapf["Memo"]=$goodspvData['memo'];                    $datapf["AddDate"]=$now_time;                    Db::name('pointsflow')->insert($datapf);                }else{                    $returnData['status']=0;                    $returnData['msg']='消费积分不足';                    return $returnData;                }            }        }        if(!empty($reudata)){            Db::name('usermsg')->where("userid='".$param['userid']."'")->update($reudata); //扣除相关会员的消费积分和购物币        }        //返奖金积分的时候，修改会员享受的层奖的代数，普通会员享受3层，奖金积分大于等于100的时候享受7代，领导人享受10代        if($goodspvData['typename']=='返积分'){            $sql= "select SUM(Amount) realmoney from pointsflow where typename='返积分' and   (Memo   like '%一级%'  or  Memo  like '%二级%'  or Memo   like '%三级%') AND UserId='".$param['userid']."'";//查找该会员总共得到的奖金积分            $returnData1= Db::query($sql);            if($returnData1[0]['realmoney']>=100){                $updateBonusRecords="update usermsg set ShareFloor=7 where ShareFloor<7 AND userType<>2 AND UserId='".$param['userid']."'";//修改该会员享受的层奖的代数                DB::execute($updateBonusRecords);            }        }        $returnData['status']=1;        $returnData['msg']='操作成功';        return $returnData;    }    /**     * 订单操作     * @param $orderno     * @return mixed     */    public function orderAction($orderno=null,$paymethod=null)    {        $datastatus["Status"]=2;        $datastatus["PayDate"]=date('Y-m-d H:i:s',time());        $datastatus['PayMethod']=$paymethod;        Db::name('ordermain')->where("innerorderid='".$orderno."'")->update($datastatus);//更新订单的状态为已付款        $returnData['status']=1;        $returnData['msg']='操作成功';        return $returnData;    }    /**     * 库存操作     * @param $styleid     * @param $pronum     * @return mixed     */    public function stockAction($styleid=null,$pronum=null,$pronum1=null,$pronum2=null)    {        $pcount = array_change_key_case(Db::name('productstock')->where("styleid=" . $styleid)->find());        $yukucun=$datas["Kucun"]=$pcount["kucun"]+$pronum;        $datas["kucunWeifukuan"] = $pcount["kucunweifukuan"] + $pronum1;        $datas["KucunWeifahuo"] = $pcount["kucunweifahuo"] + $pronum2;        if($yukucun>=0)        {            Db::name('productstock')->where("styleid=" . $styleid)->update($datas);            $nums=Db::name('productstock')->where('ProId="'.$pcount['proid'].'"')->sum('Kucun');            if($nums<1){                Db::name('product')->where('ProId="'.$pcount['proid'].'"')->update(['IsOnSell'=>3]);            }            $returnData['status']=1;            $returnData['msg']='操作成功';        }else{            $returnData['status']=0;            $returnData['msg']='库存不足';        }        return $returnData;    }    /**     * 更新订单详情中产品的结算价及分润数据     * @param $proid     */    public function updateOrderDetail($proid,$detailId,$orderno){        if(!empty($proid)&&!empty($detailId)&&!empty($orderno)){            $fields='BalancePrice,moneyOfFirst,moneyOfSecond,moneyOfThird,moneyOfEveryFloor,moneyOfFirstLeader,GiveIntegral';            $where['ProId']=$proid;            $proinfo = Db::name('product')->where($where)->field($fields)->find();            if(!empty($proinfo)){                $condition['Id']=$detailId;                Db::name('orderdetail')->where($condition)->update($proinfo);                /**                 * 获取订单详情中的分润数据                 */                $sql="select BalancePrice*proNum as BalancePrice,moneyOfFirst*proNum as moneyOfFirst,moneyOfSecond*proNum as moneyOfSecond,";                $sql.="moneyOfThird*proNum as moneyOfThird,moneyOfEveryFloor*proNum as moneyOfEveryFloor,moneyOfFirstLeader*proNum as moneyOfFirstLeader,";                $sql.="GiveIntegral*proNum as GiveIntegral from orderdetail where Id=".$detailId;                $queryData=Db::query($sql);                /**                 * 累加更新主订单分润数据                 */                $mainSql="update ordermain set BalancePrice=BalancePrice+{$queryData[0]['BalancePrice']},moneyOfFirst=moneyOfFirst+{$queryData[0]['moneyOfFirst']},";                $mainSql.="moneyOfSecond=moneyOfSecond+{$queryData[0]['moneyOfSecond']},moneyOfThird=moneyOfThird+{$queryData[0]['moneyOfThird']},";                $mainSql.="moneyOfEveryFloor=moneyOfEveryFloor+{$queryData[0]['moneyOfEveryFloor']},moneyOfFirstLeader=moneyOfFirstLeader+{$queryData[0]['moneyOfFirstLeader']},";                $mainSql.="GiveIntegral=GiveIntegral+{$queryData[0]['GiveIntegral']} where innerorderid='".$orderno."'";                Db::execute($mainSql);                $returnData['status']=1;                $returnData['msg']= '更新成功';            }else{                $returnData['status']=0;                $returnData['msg']='该产品不存在';            }        }else{            $returnData['status']=0;            $returnData['msg']='产品id或者订单号不能为空';        }        return $returnData;    }    public function giveIntegral($orderno,$ordertype,$userid){        $url='';        $fun=function($goodspv,$forwho)use($orderno,$userid,$url){            $accountData=array(                'account_goodspv'=>array(                    'goodspv'=>$goodspv,                    'typename'=>'赠积分',                    'memo'=>"购物赠积分[订单号：".$orderno."]"                ),                'userid'=>$userid,                'formwho'=>$forwho,            );           getcurl($url,$accountData);//            $this->accountAction($accountData);        };        if($ordertype=='outer'){            $orderData=Db::name('ordermain')->where("OuterOrderId='".$orderno."'")->field('GiveIntegral,SupplierId')->group('SupplierId')->select();            foreach ($orderData as $key=>$val) {                $val['GiveIntegral']=intval( $val['GiveIntegral']);                if(!empty($val['GiveIntegral'])){                    $fun($val['GiveIntegral'],$val['SupplierId']);                }            }        }elseif($ordertype=='inner'){            $orderData=Db::name('ordermain')->where("InnerOrderId='".$orderno."'")->field('GiveIntegral,SupplierId')->find();            $orderData['GiveIntegral']=intval( $orderData['GiveIntegral']);            if(!empty($orderData['GiveIntegral'])){                $fun($orderData['GiveIntegral'],$orderData['SupplierId']);            }        }    }    public function getfrieght($data=null){        $where['Id']=$data['addresid'];        $where['UserId']=session('membername');        $addres=Db::name('comreceiveinfo')->where($where)->field('Province,City,County')->find();        if(isset($data['type'])&&$data['type']==2){            $whereuser['UserId']=Session::get('membername');            $usertype=Db::view('usermsg','userType')                ->view('usertype','discount','usertype.ID=usermsg.userType')                ->where($whereuser)->find();            if($usertype['userType']==1){                $fields = 'VipPrice,Weight';                $product = Db::name('product')->where('ProId=' . $data['proid'])->field($fields)->select();                $product[0]['ProNum']=$data['prosum'];                $product[0]['ShopPrice']=$data['prosum']*$usertype['discount']*$product[0]['VipPrice'];            }elseif ($usertype['userType']>=2){                $fields = 'EnjoyPrice,Weight';                $product = Db::name('product')->where('ProId=' . $data['proid'])->field($fields)->select();                $product[0]['ProNum']=$data['prosum'];                $product[0]['ShopPrice']=$data['prosum']*$usertype['discount']*$product[0]['EnjoyPrice'];            }else{                $fields = 'MarketPrice,Weight';                $product = Db::name('product')->where('ProId=' . $data['proid'])->field($fields)->select();                $product[0]['ProNum']=$data['prosum'];                $product[0]['ShopPrice']=$data['prosum']*$usertype['discount']*$product[0]['MarketPrice'];            }            $product[0]['Weight']=$data['prosum']*$product[0]['Weight'];        }else{            $wherep['SupId']=$data['supplierid'];            $wherep['Agentd']=session('membername');            $product=Db::name('shoppingcart')->field('ProNum,ShopPrice,Weight')->where($wherep)->select();        }//        $wherep['SupId']=$data['supplierid'];//        $wherep['Agentd']=session('membername');//        $product=Db::name('shoppingcart')->field('ProNum,ShopPrice,Weight')->where($wherep)->select();        $price=0;        $weght=0;        $sum=0;        if($product){            foreach ($product as $k=>$v){                $price+=$v['ShopPrice'];                $weght+=$v['Weight'];                $sum+=$v['ProNum'];            }            if($addres){                $wheref['freightnew.SupplierId']=$data['supplierid'];                $wheref['freightnew.freighttype']=$data['id'];                $wheref['freigh_to_province.provincecitycounty_id']=$addres['County'];                $frightlist=Db::view('freightnew','*')                    ->view('freigh_to_province','*','freightnew.Id=freigh_to_province.freighrnew_Id')                    ->where($wheref)                    ->find();                if($frightlist){                    if($frightlist['type']==1){                        $fright=$this->getfright($frightlist,$weght,$price);                    }else{                        $fright=$this->getcount($frightlist,$sum);                    }                }else{                    $wheref1['freightnew.SupplierId']=$data['supplierid'];                    $wheref1['freightnew.freighttype']=$data['id'];                    $wheref1['freigh_to_province.provincecitycounty_id']=$addres['City'];                    $frightlist1=Db::view('freightnew','*')                        ->view('freigh_to_province','*','freightnew.Id=freigh_to_province.freighrnew_Id')                        ->where($wheref1)                        ->find();                    if($frightlist1){                        if($frightlist1['type']==1){                            $fright=$this->getfright($frightlist1,$weght,$price);                        }else{                            $fright=$this->getcount($frightlist1,$sum);                        }                    }else{                        $wheref2['freightnew.SupplierId']=$data['supplierid'];                        $wheref2['freightnew.freighttype']=$data['id'];                        $wheref2['freigh_to_province.provincecitycounty_id']=$addres['Province'];                        $frightlist2=Db::view('freightnew','*')                            ->view('freigh_to_province','*','freightnew.Id=freigh_to_province.freighrnew_Id')                            ->where($wheref2)                            ->find();                        if($frightlist2){                            if($frightlist2['type']==1){                                $fright=$this->getfright($frightlist2,$weght,$price);                            }else{                                $fright=$this->getcount($frightlist2,$sum);                            }                        }else{//                                var_dump(111);exit;                            $wheref3['freightnew.SupplierId']=$data['supplierid'];                            $wheref3['freightnew.freighttype']=$data['id'];                            $wheref3['freigh_to_province.provincecitycounty_id']='-1';                            $frightlist3=Db::view('freightnew','*')                                ->view('freigh_to_province','*','freightnew.Id=freigh_to_province.freighrnew_Id')                                ->where($wheref3)                                ->find();                            if($frightlist3){                                if($frightlist3['type']==1){                                    $fright=$this->getfright($frightlist3,$weght,$price);                                }else{                                    $fright=$this->getcount($frightlist3,$sum);                                }                            }else{                                $fright=0;                            }                        }                    }                }                $returndata['fright']=$fright;                $returndata['status']=0;                $returndata['msg']='成功';            }else{                $returndata['status']=1;                $returndata['msg']='传递参数有误';            }        }else{            $returndata['status']=1;            $returndata['msg']='传递参数有误';        }        return $returndata;    }    public function getfright($frightlist,$weght,$sum){        //var_dump($sum);exit;        if($frightlist['MoneyFreightFree']==-1){            if($weght<=$frightlist['Heavy']){                $fright=$frightlist['HeavyMoney'];            }else{                $limit=ceil(($weght-$frightlist['Heavy'])/$frightlist['ContinuedHeavy']);                $fright=$frightlist['HeavyMoney']+$limit*$frightlist['ContinuedHeavyMoney'];            }        }else{            if($sum>=$frightlist['MoneyFreightFree']){                $fright=0;            }else{                if($weght<=$frightlist['Heavy']){                    $fright=$frightlist['HeavyMoney'];                }else{                    $limit=ceil(($weght-$frightlist['Heavy'])/$frightlist['ContinuedHeavy']);                    $fright=$frightlist['HeavyMoney']+$limit*$frightlist['ContinuedHeavyMoney'];                }            }        }        return $fright;    }    public function getcount($frightlist,$sum){        if($frightlist['CountFreightFree']==-1){            if($sum==1){                $fright=$frightlist['CountMoney'];            }else{                $limit=ceil(($sum-1));                $fright=$frightlist['CountMoney']+$limit*$frightlist['ContinuedCountMoney'];            }        }else{            if($sum>=$frightlist['CountFreightFree']){                $fright=0;            }else{                if($sum==1){                    $fright=$frightlist['CountMoney'];                }else{                    $limit=ceil(($sum-1));                    $fright=$frightlist['CountMoney']+$limit*$frightlist['ContinuedCountMoney'];                }            }        }        return $fright;    }}