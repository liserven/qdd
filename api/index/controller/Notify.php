<?php/** * Created by 赵晓凡 * User: zhaoxiaofan * Date: 2017/2/18 * Time: 9:30 */namespace api\index\controller;use think\Request;use think\Db;/** * Class Login * @package api\index\controller * @return  */class Notify{    public function alipay_notify_url(){        require_once(EXTEND_PATH.'alipaywap/config.php');        require_once(EXTEND_PATH.'alipaywap/AlipayTradeService.php');        $arr=$_POST;        $alipaySevice = new \AlipayTradeService($config);        $alipaySevice->writeLog(var_export($_POST,true));        $result = $alipaySevice->check($arr);        if($result) {            $data=empty($_POST)?['参数为空']:$_POST;            $file='alipaylog.txt';            if(!file_exists($file)){                touch($file);            }            $string='';            foreach ($data as $key=>$val){                $string.=$key.'='.$val.'&';            }            file_put_contents($file, $string.PHP_EOL,FILE_APPEND);            if($data['trade_status']=='TRADE_SUCCESS'){            if(in_array('outer',explode('-',$data['out_trade_no']))) {//判断该订单是子订单还是主订单（主订单包含多个子订单）                $orderArr = explode('-', $data['out_trade_no']);                $condition['OuterOrderId'] = $orderArr[0];                $condition['Status'] = 1;                $goods = Db::name('ordermain')->where($condition)->field('InnerOrderId,ConsumeIntegral,UserId')->find();            }elseif (in_array('other',explode('-',$data['out_trade_no']))){                $goods=Db::name('ordermain')->where("Status=1 and InnerOrderId='".$data['out_trade_no']."' and Status=1")->field('InnerOrderId,UserId,ConsumeIntegral')->find();            }else{//针对单个的子订单进行处理                $goods=Db::name('ordermain')->field('InnerOrderId,UserId,ConsumeIntegral')->where("Status=1 and InnerOrderId='".$data['out_trade_no']."' and Status=1")->find();            }            if($goods['ConsumeIntegral']>0) {                $object = Factory::instance()->getObjectInstance('account');                $accountData = array(                    'account_goodspv' => array(                        'goodspv' => 0 - $goods['ConsumeIntegral'],                        'typename' => '扣积分',                        'memo' => "购物扣积分[订单号：" . $goods['InnerOrderId'] . "]"                    ),                    'userid' => $goods['UserId'],                    'formwho' => $goods['UserId']                );                $accountData = $object->accountAction($accountData);            }            $parameter['out_trade_no']=$data['out_trade_no'];            $parameter['time_end']=$data['gmt_payment'];            $parameter['total_fee']=$data['total_amount'];            $this->process($parameter,2);            }            echo "success";            exit();//请不要修改或删除            //——请根据您的业务逻辑来编写程序（以上代码仅作参考）——        }        else {            //验证失败            $file='alipaylog.txt';            if(!file_exists($file)){                touch($file);            }            file_put_contents($file, '验证失败'.PHP_EOL,FILE_APPEND);            //验证失败            echo "fail";	//请不要修改或删除            exit();        }    }//    public function alipay_notify_url(){//        require_once(EXTEND_PATH.'Alipay/alipay.config.php');//        require_once(EXTEND_PATH.'Alipay/lib/alipay_notify.class.php');//        //计算得出通知验证结果//        $alipayNotify = new \AlipayNotify($alipay_config);//        //针对notify_url验证消息是否是支付宝发出的合法消息//        $verify_result = $alipayNotify->verifyNotify();////        if($verify_result) {//验证成功//            $data=empty($_POST)?['参数为空']:$_POST;//            $file='alipaylog.txt';//            if(!file_exists($file)){//                touch($file);//            }//            $string='';//            foreach ($data as $key=>$val){//                $string.=$key.'='.$val.'&';//            }//            file_put_contents($file, $string.PHP_EOL,FILE_APPEND);//            if(in_array('outer',explode('-',$data['out_trade_no']))) {//判断该订单是子订单还是主订单（主订单包含多个子订单）//                $orderArr = explode('-', $data['out_trade_no']);//                $condition['OuterOrderId'] = $orderArr[0];//                $goods = Db::name('ordermain')->where($condition)->field('ConsumeIntegral,UserId')->find();////            }elseif (in_array('other',explode('-',$data['out_trade_no']))){//                $goods=Db::name('ordermain')->where("InnerOrderId='".$data['out_trade_no']."' and Status=1")->field('UserId,ConsumeIntegral')->find();//            }else{//针对单个的子订单进行处理//                $goods=Db::name('ordermain')->field('UserId,ConsumeIntegral')->where("InnerOrderId='".$data['out_trade_no']."' and Status=1")->find();//            }//            $whereuser['UserId']=$goods['UserId'];//            $sql="update usermsg set Pv=Pv-".$goods['ConsumeIntegral']." where UserId='".$goods['UserId']."'";//            Db::query($sql);//            $parameter['out_trade_no']=$data['out_trade_no'];//            $parameter['time_end']=$data['gmt_payment'];//            $parameter['total_fee']=$data['total_fee'];////            $this->process($parameter,2);////            echo "success";		//请不要修改或删除//            //——请根据您的业务逻辑来编写程序（以上代码仅作参考）——//        }//        else {//            //验证失败//            $file='alipaylog.txt';//            if(!file_exists($file)){//                touch($file);//            }//            file_put_contents($file, '验证失败'.PHP_EOL,FILE_APPEND);//            exit();//        }//    }    //微信支付通知处理    public function wxpay_notify_url(){        require_once EXTEND_PATH.'wxpayh5/WxPayPubHelper.php';        //使用通用通知接口        $notify = new \Notify_pub();        //存储微信的回调        $xml = isset($GLOBALS['HTTP_RAW_POST_DATA'])?$GLOBALS['HTTP_RAW_POST_DATA']:file_get_contents('php://input');        $notify->saveData($xml);        $data=empty($notify->data)?['参数为空']:$notify->data;        $file='wxpaylog.txt';        if(!file_exists($file)){            touch($file);        }        $string='';        foreach ($data as $key=>$val){            $string.=$key.'='.$val.'&';        }        file_put_contents($file, $string.PHP_EOL,FILE_APPEND);        //exit();        //验证签名，并回应微信。        //对后台通知交互时，如果微信收到商户的应答不是成功或超时，微信认为通知失败，        //微信会通过一定的策略（如30分钟共8次）定期重新发起通知，        //尽可能提高通知的成功率，但微信不保证通知最终能成功。        if($notify->checkSign() == FALSE){            $notify->setReturnParameter("return_code", "FAIL");//返回状态码            $notify->setReturnParameter("return_msg", "签名失败");//返回信息        }else{            $notify->setReturnParameter("return_code", "SUCCESS");//设置返回码        }        if($notify->checkSign() == TRUE){            if ($notify->data["return_code"] == "FAIL") {                return "<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[参数格式校验错误]]></return_msg></xml>";            }else{                $aa=$notify->data;                $string1='';                foreach ($aa as $key=>$val){                    $string1.=$key.'='.$val.'&';                }                if(in_array('outer',explode('-',$aa['out_trade_no']))) {//判断该订单是子订单还是主订单（主订单包含多个子订单）                    $orderArr = explode('-', $aa['out_trade_no']);                    $condition['OuterOrderId'] = $orderArr[0];                    $condition['Status'] = 1;                    $goods = Db::name('ordermain')->where($condition)->field('InnerOrderId,ConsumeIntegral,UserId')->find();                }elseif (in_array('other',explode('-',$aa['out_trade_no']))){                    $goods=Db::name('ordermain')->where("Status=1 and InnerOrderId='".$aa['out_trade_no']."' and Status=1")->field('InnerOrderId,UserId,ConsumeIntegral')->find();                }else{//针对单个的子订单进行处理                $goods=Db::name('ordermain')->field('InnerOrderId,UserId,ConsumeIntegral')->where("Status=1 and InnerOrderId='".$aa['out_trade_no']."' and Status=1")->find();                }                if($goods['ConsumeIntegral']>0) {                    $object = Factory::instance()->getObjectInstance('account');                    $accountData = array(                        'account_goodspv' => array(                            'goodspv' => 0 - $goods['ConsumeIntegral'],                            'typename' => '扣积分',                            'memo' => "购物扣积分[订单号：" . $goods['InnerOrderId'] . "]"                        ),                        'userid' => $goods['UserId'],                        'formwho' => $goods['UserId']                    );                    //改变账户余额                    $accountData = $object->accountAction($accountData);                }                $this->process($notify->data);                //处理成功后输出success，微信就不会再下发请求了                return "<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>";            }        }else{            return "<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[签名失败]]></return_msg></xml>";        }    }    //博顿支付通知处理    public function bdpay(){        var_dump($_GET);        if($_GET){            $data=$_GET;            $url = 'http://intcomsync.com/subdomain/bolton/paymentnpay/index.php?route=common/progress/checkorderid';            $ch = curl_init();//初始化curl            curl_setopt($ch, CURLOPT_URL,$url);//抓取指定网页            curl_setopt($ch, CURLOPT_HEADER, 0);//设置header            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上            curl_setopt($ch, CURLOPT_POST, 1);//post提交方式            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);            $datas = curl_exec($ch);//运行curl            curl_close($ch);            $datas=json_decode($datas,true);            if($datas['code']==0 && $datas['message']=='Success'){                if(in_array('outer',explode('-',$datas['data']['orderid']))) {//判断该订单是子订单还是主订单（主订单包含多个子订单）                    $orderArr = explode('-', $datas['data']['orderid']);                    $condition['OuterOrderId'] = $orderArr[0];                    $condition['Status'] = 1;                    $goods = Db::name('ordermain')->where($condition)->field('InnerOrderId,GoodsAmount,ConsumeIntegral,UserId')->find();                }else{//针对单个的子订单进行处理                    $goods=Db::name('ordermain')->field('InnerOrderId,GoodsAmount,UserId,ConsumeIntegral')->where("Status=1 and InnerOrderId='".$data['orderid']."' and Status=1")->find();                }                if($goods){                if($goods['ConsumeIntegral']>0) {                    $object = Factory::instance()->getObjectInstance('account');                    $accountData = array(                        'account_goodspv' => array(                            'goodspv' => 0 - $goods['ConsumeIntegral'],                            'typename' => '扣积分',                            'memo' => "购物扣积分[订单号：" . $goods['InnerOrderId'] . "]"                        ),                        'userid' => $goods['UserId'],                        'formwho' => $goods['UserId']                    );                    //改变账户余额                    $accountData = $object->accountAction($accountData);                }                    $parameter['out_trade_no']=$datas['data']['orderid'];                    $parameter['time_end']=date('Y-m-d H:i:s');                    $parameter['total_fee']=$datas['data']['total']*4;                    $this->process($parameter,3);                }                if(isMobile()=='true'){                    $url='http://'.$_SERVER['HTTP_HOST'].'/mobile.php/order/list?status=5';                    header("Location: $url");exit;                }else{                    $url='http://'.$_SERVER['HTTP_HOST'].'/index.php/member/order?orderlx=2';                    header("Location: $url");exit;                }            }        }    }    //订单的统一处理    private function process($parameter,$pay_type=1) {//支付类型(pay_type)：1为微信支付 2为支付宝支付        //订单更新的数据        $orderno=$parameter['out_trade_no'];        $orderdata['trade_time']=date('Y-m-d H:i:s',strtotime($parameter['time_end']));        $orderdata['pay_type']=$pay_type;        $orderdata['GoodsAmount']=$pay_type==1?$parameter['total_fee']/100:$parameter['total_fee'];        //记录数据的构建        $recorddata['total_fee']=$pay_type==1?$parameter['total_fee']/100:$parameter['total_fee'];//微信支付的计量单位为分，支付宝的计量单位为元        $recorddata['trade_status']=1;        $recorddata['pay_type']=$pay_type;        $recorddata['trade_time']=date('Y-m-d H:i:s',strtotime($parameter['time_end']));        $recorddata['add_date']=date('Y-m-d H:i:s',time());        $recorddata['memo']='';        if(in_array('outer',explode('-',$orderno))) {//判断该订单是子订单还是主订单（主订单包含多个子订单）            $orderArr = explode('-', $orderno);            $condition['OuterOrderId'] = $orderArr[0];            $orderlist = Db::name('ordermain')->where($condition)->field('InnerOrderId')->select();            foreach ($orderlist as $key => $val) {//针对主订单下的各个子订单分别进行处理                $status = Db::name('ordermain')->where("InnerOrderId='" . $val['InnerOrderId'] . "' and Status=1")->count();                if ($status) {                    $recorddata['orderno'] = $val['InnerOrderId'];                    $this->order_pay_record($recorddata);                    $orderdata['orderno'] = $val['InnerOrderId'];                    $this->order_status_change($orderdata);                }            }        }elseif (in_array('other',explode('-',$orderno))){            $code=Db::name('ordermain')->where("InnerOrderId='".$orderno."' and Status=1")->field('UserId')->find();            if($code){                $recorddata['orderno']=$orderno;                $this->order_pay_record($recorddata);                $orderdata['orderno']=$orderno;                $this->order_status_change($orderdata);                if($pay_type==1){                    $string='微信';                }elseif ($pay_type==2){                    $string='支付宝';                }                $accountData=array(                    'account_umoney'=>array(                        'umoney'=>0+$recorddata['total_fee'],                        'flowtype'=>'充值',                        'memo'=>"通过{$string}为购物币充值[订单号：".$orderno."]"                    ),                    'userid'=>$code['UserId'],                    'formwho'=>$code['UserId']                );                Factory::instance()->getObjectInstance('account')->accountAction($accountData);            }        }else{//针对单个的子订单进行处理            $status=Db::name('ordermain')->where("InnerOrderId='".$orderno."' and Status=1")->count();            if($status){                $recorddata['orderno']=$orderno;                $this->order_pay_record($recorddata);                $orderdata['orderno']=$orderno;                $this->order_status_change($orderdata);            }        }    }    /**     * 添加微信或者支付宝的支付记录     * @param $data     */    public function order_pay_record($data){        Db::name('orderpayrecord')->insert($data);    }    /**     * 根据微信或者支付宝的支付状态进行状态的修改     * @param $data     */    public function order_status_change($data){        $orderdata["Status"]=2;        $orderdata["PayDate"]=$data['trade_time'];        $orderdata['PayMethod']=$data['pay_type'];        $orderdata['OrderAmount']=$data['GoodsAmount'];        $where['InnerOrderId']=$data['orderno'];        Db::name('ordermain')->where($where)->update($orderdata);        $orderdetaillist=indexToLower(Db::name('orderdetail')->where("innerorderid='".$data['orderno']."'")->select());        $object = Factory::instance()->getObjectInstance('account');        foreach($orderdetaillist as $n=>$v){            //未付款库存减少，未发货库存增加            $object->stockAction($v["styleid"],0,0+$v["pronum"],0-$v["pronum"]);            //更新订单详情中产品的结算价及分润数据并汇总到订单主表中//            $object->updateOrderDetail($v['proid'],$v['id'],$data['orderno']);        }        $orderfk=array_change_key_case(Db::name('ordermain')->where($where)->find());        if($orderfk['supplierid']==1){            $orderinfo['buyer_name']=$orderfk['userid'];            $orderinfo['province']=$orderfk['province'];            $orderinfo['city']=$orderfk['city'];            $orderinfo['county']=$orderfk['county'];            $orderinfo['address']=$orderfk['address'];            $orderinfo['name']=$orderfk['receivename'];            $orderinfo['phone']=$orderfk['usertel'];            $wheredetail['InnerOrderId']=$orderfk['innerorderid'];            $wheredetail['SupplierId']=1;            $detaildata=Db::name('orderdetail')->where($wheredetail)->select();            $Goods_list=[];            foreach ($detaildata as $kk=>$vv){                $Goods_list[$kk]['rec_id']=$vv['Id'];                $Goods_list[$kk]['sku']=$vv['Txm'];                $Goods_list[$kk]['count']=$vv['proNum'];            }            $Goods_list=json_encode($Goods_list);            $orderinfo=json_encode($orderinfo);            $url='http://test.999000.cn/api/third/cart/index.php?act=ThirdStoreSubmitOrder';            $datas['Goods_list']=$Goods_list;            $datas['addr']=$orderinfo;            $datas['appid']='zhnewlg';            $datas['key']=md5($Goods_list.$orderinfo.'zhnewlg'.'zhnewlg999000jl');            $resu=http_request($url,$datas);            $resu=json_decode($resu,true);            if($resu['status']==0){                Db::name('ordermain')->where($where)->update(['order_id'=>$resu['data']['order_id']]);            }        }    }    public function orderstatuschange(){            $orderno = Request::instance()->param('orderno');            $userid = Request::instance()->param('username');            if ($orderno && $userid) {                if (strpos($orderno, '-') !== false) {                    $where['InnerOrderId'] = $orderno;                } else {                    $where['OuterOrderId'] = $orderno;                }                $where['Status'] = 1;                $where['UserId'] = $userid;                $orderdata = Db::name('ordermain')->where($where)->select();                if ($orderdata) {                    $updata['Status'] = 2;                    $updata['PayDate'] = date('Y-m-d H:i:s');                    $res = Db::name('ordermain')->where($where)->update($updata);                    foreach ($orderdata as $k=>$v){                        if($v['SupplierId']==1){                            $orderinfo['province']=$v['Province'];                            $orderinfo['city']=$v['City'];                            $orderinfo['county']=$v['County'];                            $orderinfo['address']=$v['Address'];                            $orderinfo['name']=$v['ReceiveName'];                            $orderinfo['phone']=$v['UserTel'];                            $wheredetail['UserId']=$userid;                            $wheredetail['InnerOrderId']=$v['InnerOrderId'];                            $wheredetail['SupplierId']=1;                            $detaildata=Db::name('orderdetail')->where($wheredetail)->select();                            $Goods_list=[];                            foreach ($detaildata as $kk=>$vv){                                $Goods_list[$kk]['rec_id']=$vv['Id'];                                $Goods_list[$kk]['sku']=$vv['Txm'];                                $Goods_list[$kk]['count']=$vv['proNum'];                            }                            $Goods_list=json_encode($Goods_list);                            $orderinfo=json_encode($orderinfo);                            $url='http://test.999000.cn/api/third/cart/index.php?act=ThirdStoreSubmitOrder';                            $datas['Goods_list']=$Goods_list;                            $datas['addr']=$orderinfo;                            $datas['appid']='zhnewlg';                            $datas['key']=md5($Goods_list.$orderinfo.'zhnewlg'.'zhnewlg999000jl');                            $resu=http_request($url,$datas);                            $resu=json_decode($resu,true);                            if($resu['status']==0){                                unset($where['Status']);                                Db::name('ordermain')->where($where)->update(['order_id'=>$resu['data']['order_id']]);                            }                        }                    }                    return json(['status'=>1,'msg'=>'成功']);                }else{                    return json(['status'=>0,'msg'=>'订单不存在或已经修改状态']);                }            }else{                return json(['status'=>0,'msg'=>'传递参数有误']);            }    }}